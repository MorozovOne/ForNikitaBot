import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import pytz
from datetime import datetime
import sqlite3
import re
import random

API_TOKEN = '7609138716:AAEKxcS4QAt0_bCd1fRZui7Dl0EZJGCsPfs'

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Form(StatesGroup):
    delete_link = State()
    delete_all_links = State()
    send_all_users = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            timezone TEXT DEFAULT 'Europe/Moscow'
        )
    ''')
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É links, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS links (
            link_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            url TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

    # –ê–Ω–∏–º–∞—Ü–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
    await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ")
    await asyncio.sleep(1)
    await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    await asyncio.sleep(1)
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
    instruction_text = (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫.\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏—Ö –º–Ω–µ. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "1. –û–¥–Ω–∞ —Å—Å—ã–ª–∫–∞:\n"
        "https://example.com\n\n"
        "2. –ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "https://example.com, https://anotherexample.com\n\n"
        "3. –ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
        "https://example.com\n"
        "https://anotherexample.com\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é."
    )

    await message.answer(instruction_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏")],
        [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏")]
    ], resize_keyboard=True)

    await message.answer("–ú–µ–Ω—é:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_all_users
@dp.message(Command("send_all_users"))
async def cmd_send_all_users(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if username == "vagabdsgn":
        await message.answer("–û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await state.set_state(Form.send_all_users)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message(Form.send_all_users)
async def process_send_all_users(message: types.Message, state: FSMContext):
    notification_text = message.text

    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()

    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()

    for user in users:
        user_id = user[0]
        await bot.send_message(user_id, notification_text)

    conn.close()
    await state.clear()
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
@dp.message(lambda message: re.match(r'https?://\S+', message.text))
async def process_add_link(message: types.Message):
    user_id = message.from_user.id
    urls_text = message.text

    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –∑–∞–ø—è—Ç—ã–µ
    urls_text = urls_text.replace('\n', ',').replace(' ', ',')

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    urls = [url.strip() for url in urls_text.split(',') if url.strip()]

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
    invalid_urls = []
    valid_urls = []
    for url in urls:
        if re.match(r'https?://\S+', url):
            valid_urls.append(url)
        else:
            invalid_urls.append(url)

    if invalid_urls:
        await message.answer(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n{', '.join(invalid_urls)}\n\n"
                            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'http://' –∏–ª–∏ 'https://' –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
    if not valid_urls:
        return

    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for url in valid_urls:
        cursor.execute('INSERT INTO links (user_id, url) VALUES (?, ?)', (user_id, url))

    conn.commit()
    conn.close()

    # –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    await message.answer("üîó –î–æ–±–∞–≤–ª—è—é —Å—Å—ã–ª–∫–∏...")
    await asyncio.sleep(1)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(valid_urls)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def process_delete_link(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT link_id FROM links WHERE user_id = ?', (user_id,))
    links = cursor.fetchall()
    conn.close()

    if not links:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫. –£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await state.set_state(Form.delete_link)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
@dp.message(Form.delete_link)
async def process_delete_link_state(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    link_ids = message.text

    # –†–∞–∑–¥–µ–ª—è–µ–º ID —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    link_ids = [link_id.strip() for link_id in link_ids.split(',') if link_id.strip()]

    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()

    # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É –ø–æ ID
    deleted_count = 0
    for link_id in link_ids:
        cursor.execute('DELETE FROM links WHERE user_id = ? AND link_id = ?', (user_id, link_id))
        if cursor.rowcount > 0:
            deleted_count += 1

    conn.commit()
    conn.close()

    await state.clear()
    if deleted_count > 0:
        await message.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {deleted_count}")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏"
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏")
async def process_delete_all_links(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT link_id FROM links WHERE user_id = ?', (user_id,))
    links = cursor.fetchall()
    conn.close()

    if not links:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫. –£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.")
        return

    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(Form.delete_all_links)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
@dp.message(Form.delete_all_links)
async def process_delete_all_links_state(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    confirmation = message.text.lower()

    if confirmation == '–¥–∞':
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()

        cursor.execute('DELETE FROM links WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()

        await state.clear()
        await message.answer("üóëÔ∏è –í—Å–µ —Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await state.clear()
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏"
@dp.message(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏")
async def process_show_links(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()

    cursor.execute('SELECT link_id, url FROM links WHERE user_id = ?', (user_id,))
    links = cursor.fetchall()
    conn.close()

    if links:
        links_text = "\n".join([f"ID: {link[0]}, –°—Å—ã–ª–∫–∞: {link[1]}" for link in links])
        await message.answer(f"üìú –í–∞—à–∏ —Å—Å—ã–ª–∫–∏:\n{links_text}")
    else:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
async def send_daily_link():
    while True:
        now = datetime.now(pytz.utc)
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()

        cursor.execute('SELECT user_id, timezone FROM users')
        users = cursor.fetchall()

        for user in users:
            user_id, timezone = user
            try:
                user_time = now.astimezone(pytz.timezone(timezone))

                if user_time.hour == 17 and user_time.minute == 30:
                    cursor.execute(
                        'SELECT link_id, url FROM links WHERE user_id = ? ORDER BY RANDOM() LIMIT 1',
                        (user_id,))
                    link = cursor.fetchone()

                    if link:
                        link_id, url = link
                        await bot.send_message(user_id, f"üéÅ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {url}")
                        cursor.execute('DELETE FROM links WHERE link_id = ?', (link_id,))
                        conn.commit()
                    else:
                        await bot.send_message(user_id, "üì≠ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!")
            except pytz.exceptions.UnknownTimeZoneError:
                # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                continue

        conn.close()
        await asyncio.sleep(60)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    asyncio.create_task(send_daily_link())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
